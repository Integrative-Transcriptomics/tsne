for (i in c(1:k)){
print(i)
clusters <- unlist(result['cluster'], use.names = F)
centers <- matrix(unlist(result['centers'], use.names = F), nrow = k, ncol=32)
ind <- i == clusters
filtered_data <- data[ind, ]
matplot(t(filtered_data), type='l', col='black')
matplot(centers[i, ], type='l', col='red', add=T)
}
k = 6
result<-kmeans(data, centers=k)
par(mfrow=c(2, 2))
for (i in c(1:k)){
print(i)
clusters <- unlist(result['cluster'], use.names = F)
centers <- matrix(unlist(result['centers'], use.names = F), nrow = k, ncol=32)
ind <- i == clusters
filtered_data <- data[ind, ]
matplot(t(filtered_data), type='l', col='black')
matplot(centers[i, ], type='l', col='red', add=T)
}
heatmap(as.matrix(data), Colv = NULL)
k = 10
result<-kmeans(data, centers=k)
par(mfrow=c(2, 2))
for (i in c(1:k)){
print(i)
clusters <- unlist(result['cluster'], use.names = F)
centers <- matrix(unlist(result['centers'], use.names = F), nrow = k, ncol=32)
ind <- i == clusters
filtered_data <- data[ind, ]
matplot(t(filtered_data), type='l', col='black')
matplot(centers[i, ], type='l', col='red', add=T)
}
setwd('/Users/zabel/share_romanov/data/arora/OriginalTCGAGTExData/SE_objects')
tcga_gdc <- get(load("SE_objects","tcga_gdc_log2_TPM.RData"))
tcga_gdc <- get(load("tcga_gdc_log2_TPM.RData"))
library(SummarizedExperiment)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(SummarizedExperiment)
BiocManager::install("SummarizedExperiment")
tcga_gdc <- get(load("tcga_gdc_log2_TPM.RData"))
View(tcga_gdc)
gdc_mat = assay(tcga_gdc)
setwd('/Users/zabel/share_romanov/data/arora/OriginalTCGAGTExData/SE_objects')
tcga_gdc <- get(load("tcga_gdc_log2_TPM.RData"))
tcga_gdc <- get(load("tcga_gdc_log2_TPM.RData"))
setwd('/Users/zabel/share_romanov/data/arora/OriginalTCGAGTExData/SE_objects')
tcga_gdc <- get(load("tcga_gdc_log2_TPM.RData"))
gdc_mat = assay(tcga_gdc)
library(Hmisc)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
gdc_mat = assay(tcga_gdc)
View(tcga_gdc)
gdc_mat = assays(tcga_gdc)
head(tcga_gdc)
print(tcga_gdc[0, :])
print(tcga_gdc[0, ])
str(tcga_gdc)
?slots
??slots
tcga_gdc.assays
tcga_gdc[assays]
tcga_gdc$sampleName
tcga_gdc$sampleGroup
names(tcga_gdc)
head(tcga_gdc)
tcga_gdc$assays
tcga_gdc$assay
rowranges(tcga_gdc)
rowRanges(tcga_gdc)
library(SummarizedExperiment)
rowRanges(tcga_gdc)
gdc_mat = assay(tcga_gdc)
metadata(tcga_gdc)
View(tcga_gdc)
colData(tcga_gdc)
tcga_mskcc_norm <- get(load("tcga_mskcc_norm_log2_TPM.RData"))
mskcc_norm_mat=assay(tcga_mskcc_norm)
tcga_mskcc_batch <- get(load("tcga_mskcc_batch_log2_TPM.RData"))
tcga_recount2 <- get(load("tcga_recount2_log2_TPM.RData"))
tcga_xena <- get(load("tcga_xena_log2_TPM.RData"))
tcga_piccolo <- get(load( file.path("tcga_piccolo_log2_TPM.RData"))
tcga_piccolo <- get(load("tcga_piccolo_log2_TPM.RData"))
final_all = cbind(gtex_v6_mat,  mskcc_norm_mat, mskcc_batch_mat,
recount2_mat, xena_mat)
gdc_mat = assay(tcga_gdc)
mskcc_norm_mat=assay(tcga_mskcc_norm)
mskcc_batch_mat=assay(tcga_mskcc_batch)
piccolo_mat=assay(tcga_piccolo)
recount2_mat=assay(tcga_recount2)
xena_mat= assay(tcga_xena)
final_all = cbind(gdc_mat, piccolo_mat, mskcc_norm_mat, mskcc_batch_mat,
recount2_mat, xena_mat)
write.csv(final_all, 'tcga_all.csv', row.names=TRUE)
write.csv(colData(tcga_gdc), 'tcga_all_labels.csv', row.names = FALSE)
setwd('/Users/zabel/share_romanov/data/arora/OriginalTCGAGTExData/SE_objects')
gtex_v6 <- get(load("gtex_v6_log2_TPM.RData"))
library(SummarizedExperiment)
library(Hmisc)
library(ggplot2)
library(pheatmap)
library(RColorBrewer)
setwd('/Users/zabel/share_romanov/data/arora/OriginalTCGAGTExData/SE_objects')
gtex_v6 <- get(load("gtex_v6_log2_TPM.RData"))
gtex_mskcc_norm <- get(load("gtex_mskcc_norm_log2_TPM.RData"))
gtex_mskcc_batch <- get(load("gtex_mskcc_batch_log2_TPM.RData"))
gtex_recount2 <- get(load("gtex_recount2_log2_TPM.RData"))
gtex_xena <- get(load("gtex_xena_log2_TPM.RData"))
gtex_v6_mat = assay(gtex_v6)
mskcc_norm_mat=assay(gtex_mskcc_norm)
mskcc_batch_mat=assay(gtex_mskcc_batch)
recount2_mat=assay(gtex_recount2)
xena_mat= assay(gtex_xena)
final_all = cbind(gtex_v6_mat,  mskcc_norm_mat, mskcc_batch_mat,
recount2_mat, xena_mat)
write.csv(final_all, 'gtex_all.csv', row.names=TRUE)
write.csv(colData(gtex_v6), 'gtex_all_labels.csv', row.names = FALSE)
test_shapiro <- function(size, takeDis){
# repeat the test 50 time to get a more stable value
pvalues <- sapply(c(1:100), function(x)  (shapiro.test(takeDis(size))$p))
return(median(pvalues))
}
# Define the vector for the size of the sample
m <- c(1:300)
# Apply test to the sample taken with size m
pvalues_norm <- sapply(m, function(num) test_shapiro(num, rnorm))
pvalues_unif <- sapply(m, function(num) test_shapiro(num, runif))
test_shapiro <- function(size, takeDis){
# repeat the test 50 time to get a more stable value
pvalues <- sapply(c(1:100), function(x)  (shapiro.test(takeDis(size))$p))
return(median(pvalues))
}
# Define the vector for the size of the sample
m <- c(3:300)
# Apply test to the sample taken with size m
pvalues_norm <- sapply(m, function(num) test_shapiro(num, rnorm))
pvalues_unif <- sapply(m, function(num) test_shapiro(num, runif))
plot(m, pvalues_unif, type = "l", col = "red", main = "Distribution of the p-values for the Shapiro-Wilk test",
ylim=c(0,max(pvalues_norm)),
#     xlim=c(0,150),
ylab = expression(p-value),
xlab = expression(paste("size of vector ",italic("m"))))
lines(m, pvalues_norm, col="blue")
library(macrophage)
dir <- system.file("extdata", package="macrophage")
coldata <- read.csv(file.path(dir, "coldata.csv"))
head(coldata)
coldata <- coldata[,c(1,2,3,5)]
names(coldata) <- c("names","id","line","condition")
coldata$files <- file.path(dir, "quants", coldata$names, "quant.sf.gz")
all(file.exists(coldata$files))
suppressPackageStartupMessages(library(SummarizedExperiment))
#coldata <- coldata[coldata$condition %in% c("naive","IFNg"),]
#coldata$condition <- factor(coldata$condition,
#                             levels=c("naive","IFNg"))
library(tximeta)
se <- tximeta(coldata)
assayNames(se)
b <- assays(se)
a <- b[-c(1, 2, 3)]
a_unlist <- unlist(a)
ll <- array(a_unlist, c(205870, 20, 24))
ll2 = array(a)
ll2 = array(as.matrix(a))
mean <- rray_mean(ll, 3)
library(rray)
mean <- rray_mean(ll, 3)
mean
dim(mean)
ll <- array(a_unlist, c(20, 205870, 24))
library(rray)
mean <- rray_mean(ll, 3)
dim(mean)
mean
mean[1, ,]
ll[1,1 ,1]
for (i in c(1, 2, 3, 4, 5){
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1,i])
}
ll <- array(a_unlist, c(205870, 20, 24))
library(rray)
mean <- rray_mean(ll, 3)
dim(mean)
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1,i])
}
ll <- array(a_unlist, c(24, 20, 205870))
for (i in c(1, 2, 3, 4, 5)){
print(ll[i, 1, 1])
}
ll <- array(a_unlist, c(20, 24, 205870))
for (i in c(1, 2, 3, 4, 5)){
print(ll[i, 1, 1])
}
ll <- array(a_unlist, c(20, 24, 205870))
for (i in c(1, 2, 3, 4, 5)){
print(ll[i, 1, 1])
}
print(ll[1, i, 1])
ll <- array(a_unlist, c(24, 20 , 205870))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, i, 1])
}
ll <- array(a_unlist, c(205870, 24 , 20))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1, i])
}
ll <- array(a_unlist, c(24, 205870 , 20))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1, i])
}
a_unlist <- unlist(a, recursive=FALSE)
ll <- array(a_unlist, c(24, 205870 , 20))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1, i])
}
ll <- array(a_unlist, c(205870, 24 , 20))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1, i])
}
a_unlist <- unlist(a, recursive=TRUE)
ll <- array(a_unlist, c(205870, 24 , 20))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1, i])
}
ll <- array(a_unlist, c(24, 205870 , 20))
for (i in c(1, 2, 3, 4, 5)){
print(ll[1, 1, i])
}
ll <- array(a_unlist, c(20, 205870, 24))
for (i in c(1, 2, 3, 4, 5)){
print(ll[I, 1, 1])
}
for (i in c(1, 2, 3, 4, 5)){
print(ll[i, 1, 1])
}
ll <- array(a_unlist, c(20, 24, 205870))
for (i in c(1, 2, 3, 4, 5)){
print(ll[i, 1, 1])
}
for (i in a){
array(i)
}
a_unlist <- flatten(a)
ll <- matrix(a_unlist, c(24, 205870, 20))
mean <- rray_mean(ll, 3)
library str2str
library(str2str)
install.packages('str2str')
library(str2str)
lm2a(a)
library(MASS)
#### ---------------------------------------------------------------------------------
knorm <- function (data, bsamples, thres_diff, thres_ev1, thres_ev2, burn_in=2, no_subgenes, no_fullgenes, repli) {
a <- form.mat(data, repli)
A <- a
ans1 <- matrix(0, nrow=bsamples, ncol=(length(A))^2)
ans1_1 <- matrix(0, nrow=bsamples, ncol=(length(A))^2)
ans2 <- matrix(0, nrow=bsamples, ncol=(ncol(A[[1]]))^2)
ans3 <- matrix(0, nrow=bsamples, ncol=ncol(A[[1]]))
a <- unlist(lapply(A, function(x){ifelse(is.null(nrow(x)), 1, nrow(x))}))
for (i in 1 : bsamples) {		h <- matrix(0, nrow=length(A), ncol=ncol(A[[1]]))
for (j in 1 : nrow(h)) {
h[j,] <- A[[j]][sample(1:a[j], 1),]
}
h2 <- cor(t(h))
sub_genes <- sample(1:no_fullgenes, no_subgenes)
h <- h[, sub_genes]
g <- iter_est(h, h2, thres_diff, thres_ev1, thres_ev2, burn_in)
ans1[i, ] <- as.vector(cov2cor(g[[1]]))
ans1_1[i, ] <- as.vector(g[[1]])
}
ans1 <- matrix(apply(ans1, 2, mean), byrow = FALSE, ncol = nrow(h))
ans1_1 <- matrix(apply(ans1_1, 2, mean), byrow = FALSE, ncol = nrow(h))
cat(c("..... estimating Knorm correlations"))
b <- rep(1, nrow(h))
b2 <- ginv(ans1_1)
b2[row(b2) > col(b2)] <- t(b2)[row(t(b2)) > col(t(b2))]
for (i in 1 : bsamples) {
h <- matrix(0, nrow=length(A), ncol=ncol(A[[1]]))
for (j in 1 : nrow(h)) {
h[j,] <- A[[j]][sample(1:a[j], 1),]
}
m2 <- (as.numeric((t(h)) %*% b2 %*% b))/as.numeric(((t(b)) %*% b2 %*% b))
ans3[i,] <- m2
y <- matsqrt(ans1_1)
y <- y %*% (h - t(m2 %*% (t(b))))
g2 <- cov_shrink(y)
ans2[i,] <- as.numeric(cov2cor(g2))
if (i/bsamples == 0.2) {cat(c("\n", "..... 20% completed"))}
if (i/bsamples == 0.4) {cat(c("\n", "..... 40% completed"))}
if (i/bsamples == 0.6) {cat(c("\n", "..... 60% completed"))}
if (i/bsamples == 0.8) {cat(c("\n", "..... 80% completed"))}
if (i/bsamples == 1) {cat(c("\n", "..... 100% completed"))}
}
ans2 <- matrix(apply(ans2, 2, mean), byrow = FALSE,  ncol = ncol(h))
ans3 <- t(apply(ans3, 2, mean) %*% t(rep(1, nrow(h))))
ans <- setNames(list(ans1, ans2, ans3), c("a_cor_est", "g_cor_est", "m_est"))
return(ans)
}
#### ---------------------------------------------------------------------------------
iter_est <- function (A, B, thres_diff, thres_ev1, thres_ev2, burn_in) {
ai <- B
a <- ginv(ai)
a[row(a) > col(a)] <- t(a)[row(t(a)) > col(t(a))]
b <- rep(1, nrow(B))
mi <- (as.numeric((t(A)) %*% a %*% b))/as.numeric(((t(b)) %*% a %*% b))
mi_temp <- t(mi %*% (t(b)))
y <- matsqrt(ai)
y <- y %*% (A - mi_temp)
gi <- cov_shrink(y)
ait_prev <- ai
mit_prev <- mi
mit_temp_prev <- mi_temp
git_prev <- gi
aa <- ginv(git_prev)
aa[row(aa) > col(aa)] <- t(aa)[row(t(aa)) > col(t(aa))]
no_iter <- 1
gamma <- gamma_mat(ait_prev, git_prev, thres_ev1, thres_ev2, mit_temp_prev, A)
l <- compute_logl(gamma)
flag <- 1
while (flag) {
no_iter <- no_iter + 1
b <- rep(1, nrow(B))
aa <- ginv(git_prev)
aa[row(aa) > col(aa)] <- t(aa)[row(t(aa)) > col(t(aa))]
ait_now <- (A - mit_temp_prev) %*% aa %*% (t(A - mit_temp_prev))
ait_now <- ait_now/ncol(git_prev)
a <- ginv(ait_now)
a[row(a) > col(a)] <- t(a)[row(t(a)) > col(t(a))]
mit_now <- (as.numeric((t(A)) %*% a %*% b))/as.numeric(((t(b)) %*% a %*% b))
mit_temp_now <- t(mit_now %*% (t(b)))
y <- matsqrt(ait_now)
y <- y %*% (A - mit_temp_now)
git_now <- cov_shrink(y)
aa <- ginv(git_now)
aa[row(aa) > col(aa)] <- t(aa)[row(t(aa)) > col(t(aa))]
a_violate <- sum(diag(ait_now) <= 0)
g_violate <- sum(diag(git_now) <= 0)
if (a_violate == 0 & g_violate == 0) {
gamma <- gamma_mat(ait_now, git_now, thres_ev1, thres_ev2, mit_temp_now, A)
l <- append(l, compute_logl(gamma))
if (length(gamma) != 1) {
if (no_iter <= burn_in) {
flag <- 1
}
if (no_iter > burn_in) {
flag <- ifelse((l[no_iter] - l[(no_iter - 1)]) > thres_diff, 1, 0)
}
if (flag == 1) {
mit_temp_prev <- mit_temp_now
mit_prev <- mit_now
ait_prev <- ait_now
git_prev <- git_now
}
if (flag == 0) {
mit_temp_now <- mit_temp_prev
mit_now <- mit_prev
ait_now <- ait_prev
git_now <- git_prev
a <- ginv(ait_now)
a[row(a) > col(a)] <- t(a)[row(t(a)) > col(t(a))]
aa <- ginv(git_now)
aa[row(aa) > col(aa)] <- t(aa)[row(t(aa)) > col(t(aa))]
y <- matsqrt(ait_now)
y <- y %*% (A - mit_temp_now)
no_iter <- no_iter - 1
l <- l[1:no_iter]
}
}
if (length(gamma) == 1) {
flag <- 0
mit_temp_now <- mit_temp_prev
mit_now <- mit_prev
ait_now <- ait_prev
a <- ginv(ait_now)
a[row(a) > col(a)] <- t(a)[row(t(a)) > col(t(a))]
git_now <- git_prev
aa <- ginv(git_now)
aa[row(aa) > col(aa)] <- t(aa)[row(t(aa)) > col(t(aa))]
y <- matsqrt(ait_now)
y <- y %*% (A - mit_temp_now)
no_iter <- no_iter - 1
l <- l[1:no_iter]
}
}
if (!(a_violate == 0 & g_violate == 0)) {
flag <- 0
mit_temp_now <- mit_temp_prev
mit_now <- mit_prev
ait_now <- ait_prev
git_now <- git_prev
a <- ginv(ait_now)
a[row(a) > col(a)] <- t(a)[row(t(a)) > col(t(a))]
aa <- ginv(git_now)
aa[row(aa) > col(aa)] <- t(aa)[row(t(aa)) > col(t(aa))]
y <- matsqrt(ait_now)
y <- y %*% (A - mit_temp_now)
no_iter <- no_iter - 1
l <- l[1:no_iter]
}
}
ans <- setNames(list(ait_now), c("a.cov.iterated"))
return(ans)
}
#### ---------------------------------------------------------------------------------
matsqrt <- function(A) {
e <- ginv(A)
e[row(e) > col(e)] <- t(e)[row(t(e)) > col(t(e))]
a <- eigen(e)
a_values <- a$values
b <- a_values[which(!(a_values > 0))]
a_values[which(!(a_values > 0))] <- 0
d <- diag(sqrt(a_values))
p <- a$vectors
ans <- p %*% d %*% ginv(p)
return(ans)
}
#### ----------------------------------------------------------------
cov_shrink <- function(A) {
m <- apply(A, 2, mean)
m2 <- rep(1, nrow(A)) %*% t(m)
f <- cov(A)
b <- A - m2
w <- array(0, c(ncol(A), ncol(A), nrow(A)))
w2 <- matrix(0, nrow=ncol(A), ncol=ncol(A))
s <- w2
for (i in 1 : ncol(A)) {
for (j in 1 : ncol(A)) {
for (k in 1 : nrow(A)) {
w[i,j,k] <- b[k,i] * b[k,j]
}
w2[i,j] <- mean(w[i,j,])
s[i,j] <- s[i,j] + (w[i,j,k] - w2[i,j])^2
}
}
s <- (ncol(A)/(ncol(A) - 1)^3)*s
a <- apply(A, 2, var)
T <- diag(a)
e <- s
diag(e) <- 0
g <- f
diag(g) <- 0
l <- sum(e)/ sum(g^2)
if (l > 1 | l < 0) {l <- max(0, min(1, l))}
ans <- l*T + (1-l)*f
return(ans)
}
#### ----------------------------------------------------------------
gamma_mat <- function(A, B, E, thres_ev1, G, H) {
ans <- NaN
H <- t(H)
G <- t(G)
svd_e <- eigen(A)
svd_g <- eigen(B)
p <- svd_e$values
v <- svd_e$vectors
d <- svd_g$values
u <- svd_g$vectors
pp <- p
pp[abs(pp) <= E] <- 0
dd <- d
dd[abs(dd) <= thres_ev1] <- 0
pp <- as.numeric(pp)
dd <- as.numeric(dd)
if (sum(pp >= 0) == length(pp) &  sum(dd >= 0) == length(dd)) {
pp <- ginv(diag(sqrt(pp)))
dd <- ginv(diag(sqrt(dd)))
vv <- v
uu <- u
ans <- dd %*% t(uu) %*% (H - G) %*% (vv %*% pp)
ans <- ans[which(abs(d) > thres_ev1), which(abs(p) > E)]
}
return(ans)
}
#### ----------------------------------------------------------------
compute_logl <- function(A) {
ans <- sum(-log(sqrt(2*pi)) -1/2*(as.numeric(A))^2)
return(ans)
}
#### -----------------------------------------------------------------
form.mat <- function(A, B) {
ans <- list(A[1:B[1], ])
for (i in 2: length(B)) {
ans <- append(ans, list(A[(sum(B[1 : (i-1)]) + 1):sum(B[1:i]), ]))
}
return(ans)
}
setwd('/Users/zabel/projects/tsne/diss/datasets/AGEMAP/')
load('mall')
d <- mall[-which(rownames(mall) == "BmFA4d"), ]
selected_genes <- d[, order(apply(d[-1, ], 2, var), decreasing=TRUE)][, 1:50]
selected_genes_m <- as.matrix(selected_genes)
library(stringr)
names <- sapply(rownames(d), function(x){str_sub(x, 0, -2)})
names_set <- unique(names)
repli<-sapply(names_set, function(x){sum(str_count(names, x))})
repli <- as.numeric(repli)
results <- knorm(selected_genes_m, 25, 0.01, 1e-10, 1e-10, 2, 25, ncol(selected_genes_m),repli)
a_cor_est <- results$a_cor_est
g_cor_est <- results$g_cor_est
mean <- results$m_est
write.csv(selected_genes_m, 'selected_data.txt', row.names = FALSE)
write.csv(mean, 'mean.txt', row.names = FALSE)
write.csv(a_cor_est, 'cov1.txt', row.names = FALSE)
write.csv(g_cor_est, 'cov2.txt', row.names = FALSE)
write.csv(names_set, 'labels.txt', row.names = FALSE)
